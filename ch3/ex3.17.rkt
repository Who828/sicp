(define (last-pair x)
  (if (null? (cdr x)) x (last-pair (cdr x))))

(define (count-pairs x)
  (let ((aux `()))
    (define (count-pairs-iter items)
      (cond ((or (not (pair? items)) (memq items aux))
             0)
            (else (set! aux (cons x items))
                  (+ (count-pairs-iter (car items))
                     (count-pairs-iter (cdr items))
                     1))
            )
      )
    (count-pairs-iter x)))
